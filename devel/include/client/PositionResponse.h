// Generated by gencpp from file client/PositionResponse.msg
// DO NOT EDIT!


#ifndef CLIENT_MESSAGE_POSITIONRESPONSE_H
#define CLIENT_MESSAGE_POSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client
{
template <class ContainerAllocator>
struct PositionResponse_
{
  typedef PositionResponse_<ContainerAllocator> Type;

  PositionResponse_()
    : X(0)  {
    }
  PositionResponse_(const ContainerAllocator& _alloc)
    : X(0)  {
  (void)_alloc;
    }



   typedef int64_t _X_type;
  _X_type X;





  typedef boost::shared_ptr< ::client::PositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client::PositionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PositionResponse_

typedef ::client::PositionResponse_<std::allocator<void> > PositionResponse;

typedef boost::shared_ptr< ::client::PositionResponse > PositionResponsePtr;
typedef boost::shared_ptr< ::client::PositionResponse const> PositionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client::PositionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client::PositionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::client::PositionResponse_<ContainerAllocator1> & lhs, const ::client::PositionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::client::PositionResponse_<ContainerAllocator1> & lhs, const ::client::PositionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::client::PositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client::PositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client::PositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client::PositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client::PositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client::PositionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client::PositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e404dd3cb6d4bfb308931d7bf3cfb43";
  }

  static const char* value(const ::client::PositionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e404dd3cb6d4bfbULL;
  static const uint64_t static_value2 = 0x308931d7bf3cfb43ULL;
};

template<class ContainerAllocator>
struct DataType< ::client::PositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client/PositionResponse";
  }

  static const char* value(const ::client::PositionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client::PositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 X\n"
"\n"
"\n"
;
  }

  static const char* value(const ::client::PositionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client::PositionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client::PositionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client::PositionResponse_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<int64_t>::stream(s, indent + "  ", v.X);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_MESSAGE_POSITIONRESPONSE_H
